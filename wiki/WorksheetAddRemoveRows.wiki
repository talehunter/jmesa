In version 2.5 we now have the ability to add and remove rows in the worksheet. In addition there is also a very flexible validation framework. 

Lets start with a visual! What we have here is a worksheet that has most of the new features applied. The row above the gray line is new. The second row in the body is being deleted. And the forth row is showing us the validation in action.

<img src="http://jmesa.googlecode.com/svn/trunk/jmesa/resources/wiki/worksheet.png" />

=== Worksheet Example ===

The code for this example is based on using the new !WorksheetTableFacadeTemplate, which extends the [TableFacadeTemplate] to offer worksheet specific functionality. The template is a powerful extension to the framework and makes working with the worksheet very easy. In general I recommend using the new template for creating tables, but when working with the new worksheet features I would say it is mandatory. 

The following code is based on the worksheet [http://code.google.com/p/jmesa/source/browse/trunk/jmesaWeb/src/org/jmesaweb/controller/WorksheetPresidentController.java controller] in the examples war file. You should take a look at that to see how these code snippets fit in the overall template. If you need more information about working with the worksheet you should look at the [WorksheetTutorial tutorial].

=== Adding Rows ===

The only thing you need to do to turn on the add worksheet row feature is enable the button on the toolbar via the [Preferences preferences]. Then by using the !WorksheetTableFacadeTemplate you automatically gain support for adding rows to the worksheet. To save a row that was added refer to the section (below) on saving the worksheet. _Note: this feature is only supported by the API._

{{{
html.toolbar.addWorksheetRow.enabled=true
}}}

If you have a custom toolbar you need to add the new proper toolbar type.

{{{
addToolbarItem(ToolbarItemType.ADD_WORKSHEET_ROW_ITEM);
}}}

=== Removing Rows ===

To enable the feature of removing a row from the worksheet involves using a special worksheet editor. Then by using the !WorksheetTableFacadeTemplate you automatically gain support for removing rows from the worksheet. To save a row that was removed refer to the section (below) on saving the worksheet. _Note: this feature is only supported by the API._

In this example we declared a made up column called "remove" and added it as the first column. _In general if you declare a column that does not exist JMesa will assume that this is a custom column._

{{{
HtmlColumn remove = htmlRow.getColumn("remove");
remove.getCellRenderer().setWorksheetEditor(new RemoveRowWorksheetEditor());
remove.setTitle("&nbsp;");
remove.setFilterable(false);
remove.setSortable(false);
}}}

By default the !RemoveRowWorksheetEditor will allow you to remove any row in the  worksheet. If you only want to remove rows that were added you can use the !RemoveRowAddedWorksheetEditor instead.

=== Saving Worksheet ===

The nice thing about using the worksheet template is that you no longer have to check to see if there are values that need saving explicitly. Instead you will be notified if the worksheet has changes by overriding the saveWorksheet() method of the template. Once you get the worksheet you can use the normal !WorksheetCallbackHandler to simplify iterating over the worksheet rows. The one thing that is new however is the !WorksheetRowStatus should be checked to see what needs to be done with each row.

{{{
@Override
protected void saveWorksheet(Worksheet worksheet) {
    worksheet.processRows(new WorksheetCallbackHandler() {
        public void process(WorksheetRow worksheetRow) {
            if (worksheetRow.getRowStatus().equals(WorksheetRowStatus.ADD)) {
                // would save the new President here
            } else if (worksheetRow.getRowStatus().equals(WorksheetRowStatus.REMOVE)) {
                // would delete the President here
            } else if (worksheetRow.getRowStatus().equals(WorksheetRowStatus.MODIFY)) {
                // would update the President here
            }
        }
    });
}
}}}