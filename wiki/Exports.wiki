The exports will always be handled in the Controller using the !TableFacade with the API.

{{{
TableFacade tableFacade = TableFacadeFactory.createTableFacade(id, request);
tableFacade.setColumnProperties("name.firstName", "name.lastName", "term", "career");
tableFacade.setItems(items);
tableFacade.setExportTypes(response, ExportType.CSV, ExportType.EXCEL);

Limit limit = tableFacade.getLimit();
if (limit.isExported()) {
    tableFacade.render();
    return null;
}
}}}

All the boilerplate code of rendering the exports is done for you!

_The exports will default to 'table-data.exportType' if no caption is specified._

==== Exports !ComponentFactory Option ====

There is now an alternative way to create columns using the API. This technique is completely optional but may be nice in some situations, or you may decide this is a more natural way to create tables.

All you have to do is set the table on the facade. 

{{{
TableFacade tableFacade = TableFacadeFactory.createTableFacade(id, request);
tableFacade.setItems(items);
tableFacade.setExportTypes(response, ExportType.EXCEL);

Limit limit = tableFacade.getLimit();

if (limit.isExported()) {

    if (limit.getExportType() == ExportType.EXCEL) {
        ExcelComponentFactory factory = new ExcelComponentFactory(tableFacade.getWebContext(), tableFacade.getCoreContext());

        Table table = factory.createTable();

        Row row = factory.createRow();
        row.addColumn(factory.createColumn("name.firstName"));
        row.addColumn(factory.createColumn("name.lastName"));
        row.addColumn(factory.createColumn("term"));
        row.addColumn(factory.createColumn("career"));

        table.setRow(row); // be sure to set the row on the table

        tableFacade.setTable(table);
    }
    
}
}}}

==== PDF Export ====

 * In general the PDF's has been worked on quite a bit and should work much better now.
 * The PDF export now uses a separate jmesa-pdf.css file. The PDF export was having problems with the standard stylesheet so I split it out. 

The default css file is defined in the [Preferences]:

{{{
pdf.cssLocation=/css/jmesa-pdf.css
}}}

This means that the application will look for the jmesa-pdf.css in the css folder directly under the web application context. Remember that you can override any default setting by defining your own [Preferences].

Or you could specify the css using the css attribute and set it at runtime before you call the render method.

{{{
String exportType = tableFacade.getLimit().getExport().getType();
if (exportType.equals(PDF)) {
    PdfView pdfView = (PdfView)tableFacade.getView();
    pdfView.setCssLocation("/css/jmesa-pdf-landscape.css");
}
tableFacade.render();
}}}