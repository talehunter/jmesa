The following tutorial shows how to create a custom toolbar. The reason you might want to do such a thing is to either replace the default functionality or add your own toolbar items. This example assumes you are wanting to add your own toolbar item to do something custom. The objective will be to print out an alert that display 'Hello World'. Although typically not the most useful function in a production environment, it does show the steps needed to create your own toolbar item!

=== Example ===

First start by extending the !AbstractToolbar and implement the render() method. 

{{{
public class CustomToolbar extends AbstractToolbar {
    @Override
    public String render() {}    
}
}}}

However this doesn't give you much to start with, so how about if we just drag in the [http://code.google.com/p/jmesa/source/browse/tags/jmesa-2.3/src/org/jmesa/view/html/toolbar/DefaultToolbar.java default] toolbar items first.

{{{
@Override
public String render() {
    addToolbarItem(ToolbarItemType.FIRST_PAGE_ITEM);
    addToolbarItem(ToolbarItemType.PREV_PAGE_ITEM);
    addToolbarItem(ToolbarItemType.NEXT_PAGE_ITEM);
    addToolbarItem(ToolbarItemType.LAST_PAGE_ITEM);

    addToolbarItem(ToolbarItemType.SEPARATOR);

    MaxRowsItem maxRowsItem = (MaxRowsItem) addToolbarItem(ToolbarItemType.MAX_ROWS_ITEM);
    if (getMaxRowsIncrements() != null) {
        maxRowsItem.setIncrements(getMaxRowsIncrements());
    }

    boolean exportable = ViewUtils.isExportable(getExportTypes());

    if (exportable) {
        addToolbarItem(ToolbarItemType.SEPARATOR);
        addExportToolbarItems(getExportTypes());
    }

    Row row = getTable().getRow();
    List columns = row.getColumns();

    boolean filterable = ViewUtils.isFilterable(columns);

    if (filterable) {
        addToolbarItem(ToolbarItemType.SEPARATOR);
        addToolbarItem(ToolbarItemType.FILTER_ITEM);
        addToolbarItem(ToolbarItemType.CLEAR_ITEM);
    }

    boolean editable = ViewUtils.isEditable(getCoreContext().getWorksheet());

    if (editable) {
        addToolbarItem(ToolbarItemType.SEPARATOR);
        addToolbarItem(ToolbarItemType.SAVE_WORKSHEET_ITEM);
        addToolbarItem(ToolbarItemType.FILTER_WORKSHEET_ITEM);
    }

    return super.render();
}
}}}

Now we need to create our new toolbar item. For that we need to implement the !ToolbarItem and !ToolbarItemRenderer interface.

==== !ToolbarItem ====

For a toolbar item that displays an image we can get some help from the special !ToolbarItem called the !ImageItem. The tooltip, image and alt are all used to define the <img> element. The code is used to identify the toolbar item from the other items.

{{{
ImageItemImpl item = new ImageItemImpl();
item.setCode("custom-item");
item.setTooltip("Hello World");
item.setImage(getImage("custom.png", getWebContext(), getCoreContext()));
item.setAlt("custom");
}}}

==== !ToolbarItemRenderer ====

The toolbar item renderer is built by extending the !AbstractItemRenderer and overriding the render method. You can think of the renderer as containing the information to render different toolbar items.

{{{
public class CustomItemRenderer extends AbstractItemRenderer {
    public CustomItemRenderer(ToolbarItem item, CoreContext coreContext) {
        setToolbarItem(item);
        setCoreContext(coreContext);
    }

    @Override
    public String render() {
        ToolbarItem item = getToolbarItem();
        StringBuilder action = new StringBuilder("javascript:");
        action.append("alert('Hello World')");
        item.setAction(action.toString());
        return item.enabled();
    }
}
}}}

Now bring the toolbar item and renderer together.

{{{
ToolbarItemRenderer renderer = new CustomItemRenderer(item, getCoreContext());
renderer.setOnInvokeAction("onInvokeAction");
item.setToolbarItemRenderer(renderer);
}}}

Lastly, add the toolbar item to the toolbar defined in the abstract toolbar you extended. 

{{{
addToolbarItem(item);
}}}

Thats it! You know have a custom toolbar item that will display an alert of 'Hello World'.

http://jmesa.org/wiki/images/custom-toolbar.gif

You can see the full example [http://code.google.com/p/jmesa/source/browse/trunk/jmesaWeb/src/org/jmesaweb/controller/CustomToolbar.java here].






