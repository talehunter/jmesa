The following instructions will show you how to build the JMesa project.

JMesa is built using Groovy, Ant (via Groovy's !AntBuilder) and Ivy. The first thing you need to do is make sure that you have Groovy installed correctly. Once you have it installed you can check that it is installed by typing the command 'groovy -v' on the command line. You should see something like the following:

{{{
jeff@jeff-desktop:~/workspace/jmesa$ groovy -v
Groovy Version: 1.1-rc-1 JVM: 1.6.0_03-b05
}}}

Groovy version 1.0 should work fine, as that is all that is required by JMesa.

Then copy the ivy-1.4.1.jar into the GROOVY_HOME/lib directory so that the build can interact with Ivy.

You should also checkout the repository folder from subversion as it contains all the libraries you will need to build and work with the project. In theory the Maven repositories should have the libraries needed, but there are still a few jar files missing, which is why I checked in all the libraries into the JMesa subversion repository.

To build the project first navigate to it on the command line. The files relevant to the build are build.groovy, ivy.xml, and ivyconf.xml. 

The only modification you might have to make is to the ivyconf.xml file. What you need to ensure is that it is pointing to your local repository (that you checked from the JMesa project). I keep all my projects, including the repository, in the same directory. If you do something different then just modify this file.

{{{
<ivy pattern="../repository/[organisation]/[module]/ivy-[revision].xml"/>
<artifact pattern="../repository/[organisation]/[module]/[type]s/[artifact]-[revision].[ext]"/>
}}}

Once you have this set up then building everything is easy. Just type in 'groovy build.groovy -a dist'. You then either press the enter key to accept the default name of 'snapshot', or enter in a revision number. This will build the project in a target directory of the JMesa project.

{{{
jeff@jeff-desktop:~/workspace/jmesa$ groovy build.groovy -a dist
Enter a revision number: [snapshot]
}}}

You can clean the directory by entering in 'groovy build.groovy -a clean'

{{{
jeff@jeff-desktop:~/workspace/jmesa$ groovy build.groovy -a clean
}}}

Lastly, if you want to just get all the jar files and place then in the lib directory of the project then enter in 'groovy build.groovy -a lib'. This is a convenience method so that you can retrieve all the libraries needed to work with your favorite IDE.

{{{
jeff@jeff-desktop:~/workspace/jmesa$ groovy build.groovy -a lib
}}}

_Building the JMesa examples project (jmesaWeb) works the same. Just be sure that you build the JMesa project (jmesa) first. The examples project uses an in-memory database so there is nothing more to running the project than checking it out and running it in your favorite servlet container._