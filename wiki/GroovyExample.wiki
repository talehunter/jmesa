This is my first full blown Groovy example using the new [TableFacade]! I probably went overboard with the Groovy specific syntax, but I was having fun and wanted to see how short and concise I could get the syntax and also explore different kinds of Groovy syntax. 

One of my favorite things about Groovy is that you can just cut and paste in Java syntax and then "Groovy it up", as they say! That is why you will notice that I specifically put in closure support for cell editors. I did not want to have to extend anything in JMesa to make it work. Going forward I want to always be able to have the same code work between Java and Groovy and not think about working with specific implementations.

Another nice touch, if you are using Spring, is that you can wire this all up through the [GroovySpring bean factory].

==== code references ====
All the code examples are checked into subversion. The best way to present these examples may be to just let you walk through the source code.

 * [http://jmesa.googlecode.com/svn/tags/jmesaWeb-2.2.7/src/org/jmesaweb/controller/GroovyPresidentController.java Controller]
 * [http://jmesa.googlecode.com/svn/tags/jmesaWeb-2.2.7/src/org/jmesaweb/controller/HtmlTableTemplate.java Template] _Bridges Groovy and Java_
 * [http://jmesa.googlecode.com/svn/tags/jmesaWeb-2.2.7/web/WEB-INF/groovy/GroovyPresident.groovy Groovy] file
 * [http://jmesa.googlecode.com/svn/tags/jmesaWeb-2.2.7/web/jsp/groovy.jsp JSP]

Be sure to pay attention to the [Javascript] page link so that you understand how Javascript is used to interact with the table through the onInvokeAction and onInvokeExportAction.

*Note:* If you have a date or numeric column then chances are that you will want to format it. See the [Editors] page for more details on how to do that. Be sure to add a custom [FilterMatcher filter strategy] if your column is filterable. 