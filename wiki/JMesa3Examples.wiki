I have started to convert the [Tutorials tutorials] over now. But, for the most part though you should look at the following examples to see how to build with the new API. For the motivation behind 3.0 you can read that [JMesa3 here].

 * [http://code.google.com/p/jmesa/source/browse/trunk/jmesaWeb/src/org/jmesaweb/controller/BasicPresidentController.java basic example]
 * [http://code.google.com/p/jmesa/source/browse/trunk/jmesaWeb/src/org/jmesaweb/controller/LimitPresidentController.java limit example]
 * [http://code.google.com/p/jmesa/source/browse/trunk/jmesaWeb/src/org/jmesaweb/controller/WorksheetPresidentController.java worksheet example]


 ==== Notes: ====

 * If you still want to build tables by defining the column properties you should use the !TableModelUtils.createHtmlTable(). See the [http://code.google.com/p/jmesa/wiki/JMesa3 Column Properties] section.

 * If you are using the tag library then only grab the latest jmesa.tld file if you want to change the !TableFacadeTag to the !TableModelTag. The two libraries are completely equivalent right now, with the exception of how the Limit is passed to the tag library (more on that later).

{{{
<jmesa:tableFacade />
}}}

to 

{{{
<jmesa:tableModel />
}}}

 * If you are using Groovy you will need to define your !CellEditor as an inner class now. The reason is using closures was no longer possible now that the components (table, row, column) are concrete classes instead of an interface. It is easier to build tables with the API when these are concrete classes, but now the polymorphism for the setCellEditor() methods are resolved at compile-time. This means that to use the API Groovy would have to be mandatory. The other reason I thought I could drop closures is that the syntax is almost identical when using JMesa.