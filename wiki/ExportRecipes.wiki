==== How can I export my table data to a PDF, Excel, or CSV file? ====

The best place to read about exporting data is found in the [Exports exports page] or the [ExportTutorial export tutorial].

==== How come my PDF export does not work? ====

First make sure that you have your jmesa-pdf.css in a place where the PDF export can find it. The default location is in a folder called css at the top of the web directory.

The global place to change this location is in the [Preferences preferences]. What you need to modify is the pdf.cssLocation preference.

{{{
pdf.cssLocation=/css/jmesa-pdf.css
}}}

Or you can set it directly in the API for each PDF export.

{{{
if (tableFacade.getLimit().getExportType() == PDF) {
    PdfView view = (PdfView)tableFacade.getView();
    view.setCssLocation("/somefolder/jmesa-pdf.css");
}
}}}

==== My exports are not readable. What is wrong? ====

It could be that the export is having a hard time reading out to the response. We should
first check to see if the document is being created correctly. Try the following code versus the tableFacade.render():

{{{
View view = tableFacade.getView();
FileUtils.writeByteArrayToFile(new File("/home/jeff/workspace/output.xls"), view.getBytes());
}}}

What this is doing is writing the Excel file out to a local file instead of the response stream. The !FileUtils comes from the jakarta commons io package so if you do not use that just output the file however you are used to. If the file looks good then the problem is something in your servlet container. Chances are it is a filter problem at this point. Take a look at your web.xml file and remove servlet filters until you find the filter causing problems.

_Note: currently this only works for the Excel and CSV exports. The JExcel and PDF do not currently work with this debugging feature._

==== How can I plug in my own export view? ====
You can create your own view and plug it in.

With regards to PDF files you can look at !PdfPView or the !PdfView view as an example of what a view looks like. The !PdfPView uses iText directly, and the other uses the flying saucer API to create a PDF from html. I would pick whichever one you are more comfortable doing. In general I would always look at the example view source to see how things work as that is the best way to learn.

Then there are two ways that you could plug in your view. The easiest way to understand what is going on may be to just extend the !TableFacadeImpl class and override the getExportView() method. If you look in the !TableFacadeImpl class I think it will make sense on what you need to do. Then you can also override the getExportTable() or renderExport() methods if you really need to customize things. Plus the examples might be easier to follow if you use the same methodology. You might even find it interesting to follow the render() method to understand things more.

Be sure to get on the latest release as the exports were refactored a little to make it easier to work with!

The other way you could plug in your View would be to use the tableFacade.setView() method. The setView() method does works with the [SupportInterfaces support interfaces] so if your implementation of the View implements any of the support interfaces then you will get injected with the supporting classes that you need automatically. Note: the default exports use the !AbstractExportView which does not work with the support interfaces well because it has a constructor defined. I think in the future this abstract class should just use the support interfaces, and not require a constructor, so keep that in mind as you look through the default views because I think it could be confusing. I didn't notice that until the release was already done.

If you choose the second way to plug your view into the !TableFacade your code will look something like this.

{{{
Limit limit = tableFacade.getLimit();
if (limit.isExported()) {
   if (limit.getExportType().equals(ExportType.PDF)) {
      tableFacade.setView(new MyCustomView());
   }   

   tableFacade.render();
}
}}}