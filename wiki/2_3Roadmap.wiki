The JMesa 2.3 release should be out the first quarter of 2008. For more information about the worksheet you can read the [Worksheet specs] page. There is also a [WorksheetTutorial tutorial] that you can go through.

*Update : * _You can now download the example war file and source code from the [http://builds.jmesa.org builds] directory on my Go Daddy account._

http://jmesa.org/wiki/images/worksheet-save.gif

 * *02/09/2008:* The beta release of the worksheet functionality is out! If you are interested in testing it out and offering feedback it is available in the downloads section of this site (jmesa-2.3_08.02.09.zip).

*After you get the chance to work with the worksheet be sure to send me an email with any feedback you have. It could be as simple as just letting me know its working, or not working! You can just email me directly at extremecomponents@gmail.com.*

_The example [http://jmesa.googlecode.com/svn/trunk/jmesaWeb/src/org/jmesaweb/controller/WorksheetPresidentController.java  source code] is checked into the web project. Be sure to look at that for a better idea on how to work with the worksheet functionality. Also note that so far the functionality has only been tested on Firefox using [http://www.ubuntu.com/ Ubuntu] Linux. Throughout the beta cycle I will be updating the wiki to give better instructions on how the worksheet functions._

==== Setup ====

First you need to set up the servlet. The servlet is used with AJAX technology to update the worksheet as the user is interacting with the table. That way there are no page refreshes for the current page someone is editing.

{{{
<servlet>
    <servlet-name>worksheet</servlet-name>
    <servlet-class>org.jmesa.worksheet.servlet.WorksheetServlet</servlet-class>
</servlet>
<servlet-mapping>
    <servlet-name>worksheet</servlet-name>
    <url-pattern>*.wrk</url-pattern>
</servlet-mapping>
}}}

==== Set Table to be Editable ====

===== API =====

Then set the table to be editable:

{{{
tableFacade.setEditable(true);

// the unique worksheet property to identify the row
row.setUniqueProperty("id"); 
}}}

To get a checkbox using the API:

{{{
HtmlColumn chkbox = row.getColumn("chkbox");
chkbox.getCellRenderer().setWorksheetEditor(new CheckboxWorksheetEditor());
chkbox.setTitle("&nbsp;");
chkbox.setFilterable(false);
chkbox.setSortable(false);
}}}

===== tags =====

{{{
<jmesa:tableFacade editable="true" >
   <jmesa:htmlRow uniqueProperty="id">

   </jmesa:htmlRow>
</jmesa:tableFacade>
}}}

To get a checkbox using the tags:

{{{
 <jmesa:htmlColumn property="chkbox" title="&nbsp;" worksheetEditor="org.jmesa.worksheet.editor.CheckboxWorksheetEditor" filterable="false" sortable="false"/>
}}}

==== Retrieving Values ====

Working with the worksheet makes working with an editable table clean and effortless. The following shows how you would iterate over the worksheet to see what was changed.

{{{
Worksheet worksheet = tableFacade.getWorksheet();

if (worksheet.isSaving()) {
    logger.debug("******Saving the worksheet!********");

    Collection<WorksheetRow> worksheetRows = worksheet.getRows();
    for (WorksheetRow worksheetRow : worksheetRows) {
        logger.debug("the unique property is " + worksheetRow.getUniqueProperty());
        
        Collection<WorksheetColumn> worksheetColumns = worksheetRow.getColumns();
        for (WorksheetColumn worksheetColumn : worksheetColumns) {
            logger.debug("changed value [" + worksheetColumn.getChangedValue() + "] -- original value [" + worksheetColumn.getOriginalValue() + "]");
            
            if (worksheetColumn.getChangedValue().equals("foo")) {
                worksheetColumn.setErrorKey("foo.error");
            } else {
               worksheetColumn.removeError();
            }
        }
    }
    
    //worksheet.removeAllChanges();
}
}}}