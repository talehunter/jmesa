The eXtremeTable project is replaced by JMesa. The reason is the eXtremeTable was created to be a tag library, and thus carries with it a lot of design flaws. The project is solid, and the features are great, but after seeing what worked and what did not work in the eXtremeTable I knew I either needed to build a better table, or just leave the eXtremeTable to be what it was.

So, enter JMesa... I spent about 2 months working on the UML to build a table that was soley written from an API standpoint. The new architecture can be broken down into three key packages as laid out in the [Overview overview]. The [Features features] of JMesa also point out the key differences.

The overall point is that the API is written from scratch from what was learned from the eXtremeTable. JMesa is the hindsight 20/20 implementation. Of course I used a lot of code from that project, but you would never know it as the interfaces are so different.

If there is a catch it would be that JMesa is written with the JDK1.5. I know that will not work for many people, but the industry is moving to the JDK1.5 (or even JDK1.6 as there are no language changes) and it is so much nicer working with the new JDK features. On the flip side I am going to treat the UML like a spec. This is important because I want developers to know that they can count on the core functionality not changing between releases. So, if at some point we really wanted we could have a JDK1.4 version that follows the spec, however, I would be inclined to leave that up to the community to develop.

Lastly, the code is just flat out clean, clear and consistent. Working with JMesa will make building tables more powerful and fun! 